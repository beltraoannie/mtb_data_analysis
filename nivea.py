# -*- coding: utf-8 -*-
"""Nivea.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ks3HGaO4W70E23SGZqaPw6D-cj-mjxpO
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

# %matplotlib inline

data= pd.read_csv('data_nivea.csv')

data[['Dia','Mes','Ano']] = data.DATA_TRM.str.split("/",expand=True,)
data.head()

clean_1 = {
                "HIV_TEST":{"SIM":1},
                "MTB": {"DETECTADO":1},
                "Ano":{"15":"2015"}
                }
data.replace(clean_1, inplace=True)

data = data.fillna("0")

data = data.rename(columns={"SEXO":"Sexo"})
data.head()

clean_2 = {
          "CIDADE":{"JOAO PESSOA": "JOÃO PESSOA"},
          "RESULTADO":{"P+++": "P +++"},
          "RFP.1":{"s": "S"},
          "TSA":{"SIm": "SIM","Sim": "SIM"},
          "INH":{"s": "S"},
          "BEM":{"s": "S"},
          "SM":{"s": "S"},
          "RFP":{"NÃO ":"NÃO"},
          "TSA":{"0":"Negativo", "SIM": "Positivo", "Sim":"Positivo", "SIm":"Positivo"}
                }
data.replace(clean_2, inplace=True)

data['HIV_TEST']=data['HIV_TEST'].astype(int)
data['IDADE']=data['IDADE'].astype(int)
data['Ano']=data['Ano'].astype(int)

g =sns.catplot(x="Sexo", kind="count",  data=data, palette="pastel", estimator=lambda x:  len(data))
g.set_xticklabels(['Posito', 'Negativo'])
g.set_axis_labels('Sexo', 'Número de Casos')
g.set_xticklabels(['Masculino', 'Feminino'])

data.Sexo.value_counts(normalize=True) * 100

data_new = {"Ano":[2015, 2016, 2017, 2018, 2019], "Sensibilidade":[169, 193, 215,357,197],"Resistência":[7,7,23,14,11]}
df4 = pd.DataFrame.from_dict(data_new)
df4.plot(x="Ano", y=["Sensibilidade", "Resistência"], kind="bar", colormap='Set3')
plt.xticks(rotation=0)

data_new1 = {"Ano":[2015, 2016, 2017, 2018, 2019], "Total de Teste":[707,860,879,1618,862],"MTB Detectada":[176,200,238,371,208],
             "MTB Não Detectada":[518, 642, 619, 1188,629], "Erros":[13,18,22,59,29]}
df5 = pd.DataFrame.from_dict(data_new1)

df5.plot(x="Ano", y=["Total de Teste","MTB Detectada","MTB Não Detectada","Erros"], kind="bar", colormap='Set3')
plt.xticks(rotation=0)

h =sns.catplot(x="HIV_TEST", kind="count",  data=data, palette="pastel", estimator=lambda x:  len(data))
h.set_xticklabels(['Negativo', 'Positivo'])
h.set_axis_labels('Teste de HIV', 'Número de Casos')

data.HIV_TEST.value_counts(normalize=True) * 100

t = sns.catplot(x="TSA", kind="count",
            palette="pastel", edgecolor=".6",
            data=data);
t.set_xticklabels(['Apenas TRM', 'Outros exames'])
t.set_axis_labels('Exames', 'Quantidade de Pacientes')

data.TSA.value_counts(normalize=True) * 100

g =sns.catplot(x="RFP",
            kind="count", palette="pastel", data=data)
g.set_xticklabels(['Não Detectada', 'Detectada'])
g.set_axis_labels('TRM', 'Número de Casos')

data.RFP.value_counts(normalize=True) * 100

bins = [0,10,20,30,40,50,60,70,80,90]
labels=[1,2,3,4,5,6,7,8,9]
data['IDADE'] = pd.cut(data['IDADE'], bins=bins, labels=labels, right=False)

s = sns.catplot(x="IDADE", kind="count",
            palette="pastel", edgecolor=".6",
            data=data);
s.set_xticklabels(['0-10', '10-20','20-30','30-40','40-50','50-60','60-70', '70-80', '80-90'], rotation= 90)
s.set_axis_labels('Idade', 'Número de Casos')

data.IDADE.value_counts(normalize=True) * 100

df = data[['INH','RFP.1','BEM','SM']]

df = df.rename(columns={"RFP.1":"RMP","BEM":"EMB"})

clean_4 = {
                "INH":{"0":"Negativo", "S": "Sensível", "R":"Resistente"},
                "RMP":{"0":"Negativo", "S": "Sensível", "R":"Resistente"},
                "EMB":{"0":"Negativo", "S": "Sensível", "R":"Resistente"},
                "SM":{"0":"Negativo", "S": "Sensível", "R":"Resistente"},
                }

df.replace(clean_4, inplace=True)

pieces = []
for col in df.columns:
    tmp_series = df[col].value_counts()
    tmp_series.name = col
    pieces.append(tmp_series)
    
df_value_counts = pd.concat(pieces, axis=1)

df_value_counts =  df_value_counts[1:]

df_value_counts.plot(kind='bar', colormap= 'Pastel1', rot= 0)
plt.ylabel('Número de Testes')

data.head()

data_time= data[['DATA_TRM', 'DATA_CULTURA']]
data_time.head()

mask = data_time['DATA_CULTURA'] != '0'
data_timing = data_time[mask]

data_timing = data_timing.apply(pd.to_datetime)

data_timing

data_timing['Difference'] = data_timing['DATA_CULTURA'].sub(data_timing['DATA_TRM'], axis=0)  
data_timing['Difference']= data_timing['Difference'].astype(str)
data_timing.head()

data_timing['Time'] = data_timing.Difference.apply(lambda x: x.split(' ')[0])
data_timing['Time'] = data_timing['Time'].astype(int)
data_timing['Time'] = data_timing['Time'].abs()

bins = [0,10,30,60,90,120,150,180,210]
labels=[1,2,3,4,5,6,7,8]
data_timing['Time'] = pd.cut(data_timing['Time'], bins=bins, labels=labels, right=False)

h = sns.catplot(x="Time", kind="count",
            palette="pastel", edgecolor=".6",
            data=data_timing);
h.set_xticklabels(['0-10 dias', '1 mês','2 meses','3 meses','4 meses','5 meses','6 meses', '> 6 meses'], rotation=90)
h.set_axis_labels('Tempo decorrido entre o diagnóstico e a realização da Cultura', 'Número de Casos')

data_timing.Time.value_counts(normalize= True) * 100

mask= data['TSA'] != 'Negativo'
data2 = data[mask]
data2.head()

g =sns.catplot(x="RFP.1", order=["S", "R"],
            kind="count", palette="pastel", data=data2)
g.set_xticklabels(['Sensível', 'Resistente'])
g.set_axis_labels('TSA','Número de Casos')

data2['RFP.1'].value_counts(normalize=True) * 100

# Pie chart
labels =  ['João Pessoa','Santa Rita','Bayeux','Sapé',
'Cabedelo','Guarabira','Pitimbu','Patos','Alhandra',
'Rio Tinto','Mamanguape','Pilar','Outras']
sizes = [571,89,76,33,24,16,14,13,13,12,12,11,211]
# only "explode" the 2nd slice (i.e. 'Hogs')
colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99', '#e7e1ef', '#c994c7', '#f7fcb9','#addd8e'] 
fig1, ax1 = plt.subplots(figsize=(15,10))
ax1.pie(sizes, labels=labels, autopct='%1.1f%%', colors=colors, startangle=90)
plt.title('Distribuição do Número de Casos por Cidade')
ax1.axis('equal')  
plt.tight_layout()
plt.savefig('cidade.png')

p = sns.catplot(y=labels, x=sizes, kind="bar",
            palette="pastel", edgecolor=".6",
            data=data);
p.set_axis_labels('Número de Casos', 'Cidades')